{
    "critiques": {
        "681": {
            "rubric_items": {
                "5519": {
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: Action levels have the correct number of actions\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: Literal levels have the correct number of literals\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: competing_needs_mutex behaves correctly\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: inconsistent_effects_mutex behaves correctly\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: inconsistent_support_mutex behaves correctly\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: interference_mutex behaves correctly\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: negation_mutex behaves correctly\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: Serialization of mutexes is correct\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: levelsum heuristic behaves correctly\n----------------------------------------------------------------------\nIndexError: list index out of range\n\n\nFailed Test: AirCargoProblem implements the ignore preconditions heuristic\n----------------------------------------------------------------------\nAssertionError: 0 != 2 : Your heuristic did not return the correct value for the minimum number of actions that must be carried out from the initial state in order to satisfy all of the goal conditions.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\nAction levels have the correct number of actions:                      E\nLiteral levels have the correct number of literals:                    E\ncompeting_needs_mutex behaves correctly:                               E\ninconsistent_effects_mutex behaves correctly:                          E\ninconsistent_support_mutex behaves correctly:                          E\ninterference_mutex behaves correctly:                                  E\nnegation_mutex behaves correctly:                                      E\nSerialization of mutexes is correct:                                   E\nlevelsum heuristic behaves correctly:                                  E\nAirCargoProblem implements the ignore preconditions heuristic:         F\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                },
                "5516": {
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: air_cargo_p2 returns the correct initial fluents\n----------------------------------------------------------------------\nAttributeError: 'NoneType' object has no attribute 'initial'\n\n\nFailed Test: air_cargo_p2 returns the correct goal fluents\n----------------------------------------------------------------------\nAttributeError: 'NoneType' object has no attribute 'goal'\n\n\nFailed Test: air_cargo_p2 returns the correct initial values\n----------------------------------------------------------------------\nAttributeError: 'NoneType' object has no attribute 'cargos'\n\n\nFailed Test: air_cargo_p3 returns the correct initial fluents\n----------------------------------------------------------------------\nAttributeError: 'NoneType' object has no attribute 'initial'\n\n\nFailed Test: air_cargo_p3 returns the correct goal fluents\n----------------------------------------------------------------------\nAttributeError: 'NoneType' object has no attribute 'goal'\n\n\nFailed Test: air_cargo_p3 returns the correct initial values\n----------------------------------------------------------------------\nAttributeError: 'NoneType' object has no attribute 'cargos'\n\n\nFailed Test: AirCargoProblem yields a correct solution when input to breadth_first_search\n----------------------------------------------------------------------\nAttributeError: 'NoneType' object has no attribute 'solution'\n\n\nFailed Test: air_cargo_p2 returns an object of type problem\n----------------------------------------------------------------------\nAssertionError: None is not an instance of <class 'aimacode.search.Problem'> : Failed to return an object of type problem\n\n\nFailed Test: air_cargo_p3 returns an object of type problem\n----------------------------------------------------------------------\nAssertionError: None is not an instance of <class 'aimacode.search.Problem'> : Failed to return an object of type problem\n\n\nFailed Test: AirCargoProblem correctly lists possible actions in a given state\n----------------------------------------------------------------------\nAssertionError: Incorrect actions.\n\nYour code did not generate all required actions, which means that you may have skipped some combinations of fluents, or there may be an error in the action name or argument names that prevents a literal match with the signature specified in the schema.  Carefully review your actions against the schema defined in the project README.\nMissing actions:\n   Fly(P1, SFO, JFK)\n   Load(C2, P2, JFK)\n   Fly(P2, JFK, SFO)\n   Load(C1, P1, SFO)\n\n\nFailed Test: AirCargoProblem correctly constructs all possible actions\n----------------------------------------------------------------------\nAssertionError: Incorrect actions.\n\nYour code did not generate all required actions, which means that you may have skipped some combinations of fluents, or there may be an error in the action name or argument names that prevents a literal match with the signature specified in the schema.  Carefully review your actions against the schema defined in the project README.\nMissing actions:\n   Load(C1, P2, JFK)\n   Load(C2, P1, JFK)\n   Unload(C2, P2, SFO)\n   Unload(C1, P2, JFK)\n   Unload(C2, P2, JFK)\n   Load(C2, P1, SFO)\n   Load(C2, P2, JFK)\n   Unload(C1, P2, SFO)\n   Load(C1, P1, JFK)\n   Unload(C1, P1, JFK)\n   Unload(C2, P1, SFO)\n   Load(C1, P1, SFO)\n   Unload(C1, P1, SFO)\n   Unload(C2, P1, JFK)\n   Load(C1, P2, SFO)\n   Load(C2, P2, SFO)\n\n\nFailed Test: AirCargoProblem correctly updates state for a given action\n----------------------------------------------------------------------\nAssertionError: Lists differ: [] != ['At(C2, JFK)', 'At(P1, SFO)', 'At(P2, JFK)', 'In(C1, P1)']\n\nSecond list contains 4 additional elements.\nFirst extra element 0:\n'At(C2, JFK)'\n\n- []\n+ ['At(C2, JFK)', 'At(P1, SFO)', 'At(P2, JFK)', 'In(C1, P1)'] : Your result function did not produce the expected output. The list of positive fluents was incorrect.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\nair_cargo_p2 returns the correct initial fluents:                      E\nair_cargo_p2 returns the correct goal fluents:                         E\nair_cargo_p2 returns the correct initial values:                       E\nair_cargo_p3 returns the correct initial fluents:                      E\nair_cargo_p3 returns the correct goal fluents:                         E\nair_cargo_p3 returns the correct initial values:                       E\nAirCargoProblem yields a correct solution when input to breadth_first: E\nair_cargo_p2 returns an object of type problem:                        F\nair_cargo_p3 returns an object of type problem:                        F\nAirCargoProblem correctly lists possible actions in a given state:     F\nAirCargoProblem correctly constructs all possible actions:             F\nAirCargoProblem correctly updates state for a given action:            F\nair_cargo_p1 returns the correct initial fluents:                      .\nair_cargo_p1 returns the correct goal fluents:                         .\nair_cargo_p1 returns an object of type problem:                        .\nair_cargo_p1 returns the correct initial values:                       .\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                }
            }
        }
    }
}